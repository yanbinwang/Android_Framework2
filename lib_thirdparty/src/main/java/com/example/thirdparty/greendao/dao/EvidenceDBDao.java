package com.example.thirdparty.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.thirdparty.greendao.bean.EvidenceDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EVIDENCE_DB".
*/
public class EvidenceDBDao extends AbstractDao<EvidenceDB, String> {

    public static final String TABLENAME = "EVIDENCE_DB";

    /**
     * Properties of entity EvidenceDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Baoquan = new Property(0, String.class, "baoquan", true, "BAOQUAN");
        public final static Property SourcePath = new Property(1, String.class, "sourcePath", false, "SOURCE_PATH");
        public final static Property UserId = new Property(2, String.class, "userId", false, "USER_ID");
        public final static Property Index = new Property(3, int.class, "index", false, "INDEX");
        public final static Property FilePointer = new Property(4, long.class, "filePointer", false, "FILE_POINTER");
        public final static Property IsUpload = new Property(5, boolean.class, "isUpload", false, "IS_UPLOAD");
        public final static Property IsComplete = new Property(6, boolean.class, "isComplete", false, "IS_COMPLETE");
    }


    public EvidenceDBDao(DaoConfig config) {
        super(config);
    }
    
    public EvidenceDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EVIDENCE_DB\" (" + //
                "\"BAOQUAN\" TEXT PRIMARY KEY NOT NULL ," + // 0: baoquan
                "\"SOURCE_PATH\" TEXT," + // 1: sourcePath
                "\"USER_ID\" TEXT," + // 2: userId
                "\"INDEX\" INTEGER NOT NULL ," + // 3: index
                "\"FILE_POINTER\" INTEGER NOT NULL ," + // 4: filePointer
                "\"IS_UPLOAD\" INTEGER NOT NULL ," + // 5: isUpload
                "\"IS_COMPLETE\" INTEGER NOT NULL );"); // 6: isComplete
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EVIDENCE_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EvidenceDB entity) {
        stmt.clearBindings();
 
        String baoquan = entity.getBaoquan();
        if (baoquan != null) {
            stmt.bindString(1, baoquan);
        }
 
        String sourcePath = entity.getSourcePath();
        if (sourcePath != null) {
            stmt.bindString(2, sourcePath);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
        stmt.bindLong(4, entity.getIndex());
        stmt.bindLong(5, entity.getFilePointer());
        stmt.bindLong(6, entity.getIsUpload() ? 1L: 0L);
        stmt.bindLong(7, entity.getIsComplete() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EvidenceDB entity) {
        stmt.clearBindings();
 
        String baoquan = entity.getBaoquan();
        if (baoquan != null) {
            stmt.bindString(1, baoquan);
        }
 
        String sourcePath = entity.getSourcePath();
        if (sourcePath != null) {
            stmt.bindString(2, sourcePath);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
        stmt.bindLong(4, entity.getIndex());
        stmt.bindLong(5, entity.getFilePointer());
        stmt.bindLong(6, entity.getIsUpload() ? 1L: 0L);
        stmt.bindLong(7, entity.getIsComplete() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public EvidenceDB readEntity(Cursor cursor, int offset) {
        EvidenceDB entity = new EvidenceDB( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // baoquan
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sourcePath
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userId
            cursor.getInt(offset + 3), // index
            cursor.getLong(offset + 4), // filePointer
            cursor.getShort(offset + 5) != 0, // isUpload
            cursor.getShort(offset + 6) != 0 // isComplete
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EvidenceDB entity, int offset) {
        entity.setBaoquan(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSourcePath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIndex(cursor.getInt(offset + 3));
        entity.setFilePointer(cursor.getLong(offset + 4));
        entity.setIsUpload(cursor.getShort(offset + 5) != 0);
        entity.setIsComplete(cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(EvidenceDB entity, long rowId) {
        return entity.getBaoquan();
    }
    
    @Override
    public String getKey(EvidenceDB entity) {
        if(entity != null) {
            return entity.getBaoquan();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EvidenceDB entity) {
        return entity.getBaoquan() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
